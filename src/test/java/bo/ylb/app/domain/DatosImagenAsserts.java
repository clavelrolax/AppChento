package bo.ylb.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatosImagenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosImagenAllPropertiesEquals(DatosImagen expected, DatosImagen actual) {
        assertDatosImagenAutoGeneratedPropertiesEquals(expected, actual);
        assertDatosImagenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosImagenAllUpdatablePropertiesEquals(DatosImagen expected, DatosImagen actual) {
        assertDatosImagenUpdatableFieldsEquals(expected, actual);
        assertDatosImagenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosImagenAutoGeneratedPropertiesEquals(DatosImagen expected, DatosImagen actual) {
        assertThat(actual)
            .as("Verify DatosImagen auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosImagenUpdatableFieldsEquals(DatosImagen expected, DatosImagen actual) {
        assertThat(actual)
            .as("Verify DatosImagen relevant properties")
            .satisfies(a -> assertThat(a.getImagen1()).as("check imagen1").isEqualTo(expected.getImagen1()))
            .satisfies(a ->
                assertThat(a.getImagen1ContentType()).as("check imagen1 contenty type").isEqualTo(expected.getImagen1ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen2()).as("check imagen2").isEqualTo(expected.getImagen2()))
            .satisfies(a ->
                assertThat(a.getImagen2ContentType()).as("check imagen2 contenty type").isEqualTo(expected.getImagen2ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen3()).as("check imagen3").isEqualTo(expected.getImagen3()))
            .satisfies(a ->
                assertThat(a.getImagen3ContentType()).as("check imagen3 contenty type").isEqualTo(expected.getImagen3ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen4()).as("check imagen4").isEqualTo(expected.getImagen4()))
            .satisfies(a ->
                assertThat(a.getImagen4ContentType()).as("check imagen4 contenty type").isEqualTo(expected.getImagen4ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen5()).as("check imagen5").isEqualTo(expected.getImagen5()))
            .satisfies(a ->
                assertThat(a.getImagen5ContentType()).as("check imagen5 contenty type").isEqualTo(expected.getImagen5ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen6()).as("check imagen6").isEqualTo(expected.getImagen6()))
            .satisfies(a ->
                assertThat(a.getImagen6ContentType()).as("check imagen6 contenty type").isEqualTo(expected.getImagen6ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen7()).as("check imagen7").isEqualTo(expected.getImagen7()))
            .satisfies(a ->
                assertThat(a.getImagen7ContentType()).as("check imagen7 contenty type").isEqualTo(expected.getImagen7ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen8()).as("check imagen8").isEqualTo(expected.getImagen8()))
            .satisfies(a ->
                assertThat(a.getImagen8ContentType()).as("check imagen8 contenty type").isEqualTo(expected.getImagen8ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen9()).as("check imagen9").isEqualTo(expected.getImagen9()))
            .satisfies(a ->
                assertThat(a.getImagen9ContentType()).as("check imagen9 contenty type").isEqualTo(expected.getImagen9ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen10()).as("check imagen10").isEqualTo(expected.getImagen10()))
            .satisfies(a ->
                assertThat(a.getImagen10ContentType()).as("check imagen10 contenty type").isEqualTo(expected.getImagen10ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen11()).as("check imagen11").isEqualTo(expected.getImagen11()))
            .satisfies(a ->
                assertThat(a.getImagen11ContentType()).as("check imagen11 contenty type").isEqualTo(expected.getImagen11ContentType())
            )
            .satisfies(a -> assertThat(a.getImagen12()).as("check imagen12").isEqualTo(expected.getImagen12()))
            .satisfies(a ->
                assertThat(a.getImagen12ContentType()).as("check imagen12 contenty type").isEqualTo(expected.getImagen12ContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosImagenUpdatableRelationshipsEquals(DatosImagen expected, DatosImagen actual) {
        assertThat(actual)
            .as("Verify DatosImagen relationships")
            .satisfies(a -> assertThat(a.getVersionDatos()).as("check versionDatos").isEqualTo(expected.getVersionDatos()));
    }
}
