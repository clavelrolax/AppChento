package bo.ylb.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosAllPropertiesEquals(Datos expected, Datos actual) {
        assertDatosAutoGeneratedPropertiesEquals(expected, actual);
        assertDatosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosAllUpdatablePropertiesEquals(Datos expected, Datos actual) {
        assertDatosUpdatableFieldsEquals(expected, actual);
        assertDatosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosAutoGeneratedPropertiesEquals(Datos expected, Datos actual) {
        assertThat(actual)
            .as("Verify Datos auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosUpdatableFieldsEquals(Datos expected, Datos actual) {
        assertThat(actual)
            .as("Verify Datos relevant properties")
            .satisfies(a -> assertThat(a.getInversionTotal()).as("check inversionTotal").isEqualTo(expected.getInversionTotal()))
            .satisfies(a -> assertThat(a.getIngresosxVentas()).as("check ingresosxVentas").isEqualTo(expected.getIngresosxVentas()))
            .satisfies(a -> assertThat(a.getGananciasYLB()).as("check gananciasYLB").isEqualTo(expected.getGananciasYLB()))
            .satisfies(a -> assertThat(a.getGoubernamentTak()).as("check goubernamentTak").isEqualTo(expected.getGoubernamentTak()))
            .satisfies(a -> assertThat(a.getRegalias()).as("check regalias").isEqualTo(expected.getRegalias()))
            .satisfies(a -> assertThat(a.getIue()).as("check iue").isEqualTo(expected.getIue()))
            .satisfies(a -> assertThat(a.getIva()).as("check iva").isEqualTo(expected.getIva()))
            .satisfies(a -> assertThat(a.getIt()).as("check it").isEqualTo(expected.getIt()))
            .satisfies(a -> assertThat(a.gett1precioVentaprom()).as("check t1precioVentaprom").isEqualTo(expected.gett1precioVentaprom()))
            .satisfies(a -> assertThat(a.gett1costoVariable()).as("check t1costoVariable").isEqualTo(expected.gett1costoVariable()))
            .satisfies(a -> assertThat(a.gett1costoVartarifa()).as("check t1costoVartarifa").isEqualTo(expected.gett1costoVartarifa()))
            .satisfies(a -> assertThat(a.gett1margenUnitario()).as("check t1margenUnitario").isEqualTo(expected.gett1margenUnitario()))
            .satisfies(a -> assertThat(a.gett1costoFijo()).as("check t1costoFijo").isEqualTo(expected.gett1costoFijo()))
            .satisfies(a ->
                assertThat(a.gett1costoTotalunitprom()).as("check t1costoTotalunitprom").isEqualTo(expected.gett1costoTotalunitprom())
            )
            .satisfies(a -> assertThat(a.gett1puntoEquilibrio()).as("check t1puntoEquilibrio").isEqualTo(expected.gett1puntoEquilibrio()))
            .satisfies(a -> assertThat(a.gett2tasainteres()).as("check t2tasainteres").isEqualTo(expected.gett2tasainteres()))
            .satisfies(a -> assertThat(a.gett2tasadescuento()).as("check t2tasadescuento").isEqualTo(expected.gett2tasadescuento()))
            .satisfies(a -> assertThat(a.gett2vandelProyecto()).as("check t2vandelProyecto").isEqualTo(expected.gett2vandelProyecto()))
            .satisfies(a -> assertThat(a.gett2vanYlb()).as("check t2vanYlb").isEqualTo(expected.gett2vanYlb()))
            .satisfies(a -> assertThat(a.gett2vp()).as("check t2vp").isEqualTo(expected.gett2vp()))
            .satisfies(a -> assertThat(a.gett2tirProyecto()).as("check t2tirProyecto").isEqualTo(expected.gett2tirProyecto()))
            .satisfies(a -> assertThat(a.gett2tirYlb()).as("check t2tirYlb").isEqualTo(expected.gett2tirYlb()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatosUpdatableRelationshipsEquals(Datos expected, Datos actual) {
        assertThat(actual)
            .as("Verify Datos relationships")
            .satisfies(a -> assertThat(a.getVersionDatos()).as("check versionDatos").isEqualTo(expected.getVersionDatos()));
    }
}
